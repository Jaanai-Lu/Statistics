"""
dplyr 操作汇总
"""
library(dplyr)
library(pacman)

# 在对数据进行可视化之前我们往往需要进行数据转换以得到可视化所需要的数据内容与格式。
# 这里我们使用dplyr包操作2013年纽约市的航班起飞数据集（2013）。

# 准备
# 这部分我们聚焦于如何使用dplyr包，除ggplot2的另一个tidyverse核心成员。
# 我们将使用nyclights13数据包解释关键的概念并使用ggplot2帮助理解数据。
# 导入包
p_load(nycflights13)
library(tidyverse)
# 注意一下你导入tidyverse包时给出的冲突信息（Conflicts），
# 它告诉你dplyr覆盖了R基础包中的函数。
# 如果你想要在载入tidyverse包后仍然使用这些函数，
# 你需要使用函数的全名stats::filter()和stats::lag()进行调用。

# nycflights13
# 我们将使用nycflights13::flights来探索dplyr包基本的数据操作
# 该数据集包含2013年336,776次航班起飞数据，来自美国交通统计局。
head(flights)
# 与基本包显示的普通数据集输出不同，
# 这里适配地显示了在一个屏幕前6行和所有的列
# 我们可以使用View(flights）在Rstudio中查看数据集的所有信息。
# 输出显示不同的原因是这个数据集是一个Tibble。
# Tibbles都是数据框data.frame，但经过改良以便于更好（在tidyverse生态中）工作。
view(flights)

# 你可能已经注意到每个列名下面有三到四个字母的缩写。它们描述了每个变量的类型：
# int代表整数
# dbl代表浮点数或者实数
# chr代表字符向量或者字符串
# dttm代表日期-时间
# 还有其他三种数据类型在本部分不会使用到，但后续我们会接触：
# lgl代表逻辑向量，只含TRUE和FALSE
# fctr代表因子，R用它来代表含固定可能值的分类变量
# date代表日期

# dplyr基础
# 这部分我们学习5个关键的dplyr函数，它可以让我们解决遇到的大部分数据操作问题：
# 根据值选择观察（记录），filter()
# 对行重新排序，arrange()
# 根据名字选择变量，select()
# 根据已知的变量创建新的变量，mutate()
# 将许多值塌缩为单个描述性汇总，summarize()
# 这些函数都可以通过group_by()衔接起来，该函数改变上述每个函数的作用域，
# 从操作整个数据集到按组与组操作。这六个函数提供了数据操作语言的动词。

# 所有的动词工作都非常相似：
# 第一个参数都是数据框
# 随后的参数描述了使用变量名（不加引号）对数据框做什么
# 结果是一个新的数据框
# 这些属性一起便利地将多个简单步骤串联起来得到一个复杂的操作（结果）。
# 让我们实际来看看这些动词是怎么工作的。

# 使用filter()过滤/选择行
# filter()允许我们根据观测值来对数据集取子集。
# 第一个参数是数据框的名字，第二和随后的参数是用于过滤数据框的表达式。
# 比如，我们可以选择所有一月一号的航班：
filter(flights, month == 1, day == 1)
# 这一行代码dplyr执行了过滤操作并返回了一个新的数据框。
# dplyr从不修改输入数据，所以如果你想要保存数据，必须使用<-进行赋值：
filter(flights, month == 1, day == 1) -> jan1
# R要么输出结果，要么将结果保存到一个变量。
# 如果我们想要同时做到这一点，你可以把赋值放在括号里：
(filter(flights, month == 12, day == 25) -> dec25)

# 比较
# 想要有效地过滤，你必须知道怎么利用比较操作符来选择观测值。
# R提供了标准的比较符：>,>=,<=,!=和==。
# 一个常见的错误是用=而不是==来检测相等。如果这种情况发生了，你会收到报错信息：
filter(flights, month = 1)
# Error: `month` (`month = 1`) must not be named, do you need `==`?
# 另一个你在使用==时可能遭遇的常见问题是浮点数。下面的结果可能会让你惊掉大牙：
sqrt(2) ^ 2 == 2
## [1] FALSE
1/49 * 49 == 1
## [1] FALSE

# 逻辑操作符
# &是与，|是或，!是非。
# 下面代码找到在十一月或十二月起飞的所有航班：
filter(flights, month == 11 | month == 12)
# 注意，你不能写成filter(flights, month == 11 | 12)，虽然语义上讲的通
# 对于R而言，它会先计算11|12得到1，然后计算month == 1，这就不是我们需要的了！
# 11|12 # [1] TRUE
# 解决这种问题的一种有用简写为x %in% y。
# 这将选择符合x属于y的行（x是y中的一个值）。我们可以用它重写前面的代码：
(filter(flights, month %in% c(11, 12)) -> nov_dec) # 选择月份中的11、12月
# 对%in%理解的一种好的方式就是将它发音为"中的"。

# 缺失值
# NA代表未知值或者称为缺失值，它是能“传染”的，
# 几乎任何涉及未知值的操作都会是一个未知值。
NA > 5
## [1] NA
10 == NA
## [1] NA
NA + 10
## [1] NA
NA / 2
## [1] NA
# 最让人困惑的结果是这个：
NA == NA
## [1] NA
# 最简单理解为什么这是TRUE的方式是带入一点语境：
# 把x看作小明的年龄，我们不知道他多大
x <- NA
# 把y看作小红的年龄，我们不知道她多大
y <- NA
# 小明和小红一样大吗？
x == y
## [1] NA
# 我们不知道
# 如果你想确定一个值是不是缺失了，使用is.na()：
is.na(x)
## [1] TRUE
# filter()仅仅会包含条件是TRUE的行，把是FALSE或者NA的行排除。
(df <- tibble(x = c(1, NA, 3)))
filter(df, x > 1)
# 如果你想要保留缺失值，你可以显式地指定：
filter(df, is.na(x) | x > 1)

# 使用arrange()排列行
# arrange()函数工作原理和filter()相似，但它不是选择行，而是改变行的顺序。
# 它使用一个数据框和一系列有序的列变量（或者更复杂的表达式）作为输入。
# 如果你提供了超过一个列名，其他列对应着进行排序。
head(flights)
arrange(flights, year, month, day)
# 使用desc()可以以逆序（降序）的方式排列：
arrange(flights, desc(dep_time))
# 缺失值会排到最后面：
(df <- tibble(x = c(5, 2, NA)))
arrange(df, x) # 升序
arrange(df, desc(x)) # 降序

# 使用select()选择列
# 一般我们分析的原始数据集有非常多的变量（列），
# 第一个我们要解决的问题就是缩小范围找到我们需要的数据（变量）。
# select()允许我们快速通过变量名对数据集取子集。
# 根据名字选择列
select(flights, year, month, day)
# 选择year到day之间（包含本身）的所有列
select(flights, year:day)
# 选择除year到day外的所有列
select(flights, -(year:day))
# 有很多帮助函数可以使用在select()函数中：
# starts_with("abc")匹配以“abc”开头的名字。
# ends_with("xyz")匹配以“xyz”结尾的名字。
# contains("ijk")匹配包含“ijk”的名字。
# matches("(.)\1")选择符合正则表达式的变量。这里是任意包含有重复字符的变量。
# num_range("x", 1:3)匹配x1，x2，x3。
# 运行?select查看更多详情。

# select()也可以用来重命名变量，但很少使用到，
# 因为它会将所有未显示指定的变量删除掉。
# 我们可以使用它的变体函数rename()来给变量重新命名：
rename(flights, tail_num = tailnum)
# select()的另外一个操作是与everything()帮助函数联合使用。
# 当你有一大堆变量你想要移动到数据框开始（最左侧）时非常有用。
select(flights, time_hour, air_time, everything()) # 将这俩列移到数据框最左侧

# 使用mutate()添加新变量
# 除了选择已存在的列，另一个常见的操作是添加新的列。这就是mutate()函数的工作了。
# mutate()函数通常将新增变量放在数据集的最后面。
# 为了看到新生成的变量，我们使用一个小的数据集。
flights_sml <- select(flights,
                      year:day,
                      ends_with("delay"),
                      distance,
                      air_time)
flights_sml
mutate(flights_sml,
       gain = arr_delay - dep_delay,
       speed = distance / air_time * 60)
mutate(flights_sml,
       gain = arr_delay - dep_delay,
       hours = air_time / 60,
       gain_per_hour = gain / hours)
# 如果你仅仅想要保存新的变量，使用transmute()：
transmute(flights,
          gain = arr_delay - dep_delay,
          hours = air_time / 60,
          gain_per_hour = gain / hours)

# 有用的创造函数
# 有很多函数可以结合mutate()一起使用来创造新的变量。
# 这些函数的一个关键属性就是向量化的：
# 它必须使用一组向量值作为输入，然后返回相同长度的数值作为输出。
# 我们没有办法将所有的函数都列举出来，这里选择一些被频繁使用的函数。

# 算术操作符
# 算术操作符本质都是向量化的函数，遵循“循环补齐”的规则。
# 如果一个参数比另一个参数短，它会自动扩展为后者同样的长度。
# 比如air_time / 60，hours * 60等等。
# 模运算（%/%和%%）
# %/%整除和%%取余。
# 对数
# log()，log2()和log10()
# 位移量/偏移量
# lead()和lag()允许你前移或后移变量的值
(x <- 1:10)
lag(x)
lead(x)
# 累积计算
# R提供了累积和、累积积、和累积最小值、和累积最大值：
# cumsum(),cumprod(),cummin(),cummax()
# dplyr提供cummean()用于计算累积平均值。
# 如果你想要进行滚动累积计算，可以尝试下RcppRoll包。
x
cumsum(x)
cummean(x)
# 逻辑比较
# <`,`<=`,`>,&gt;=,!=
# 排序rank
# 存在很多rank函数，但我们从min_rank()的使用开始，
# 它可以实现最常见的rank（例如第一、第二、第三、第四），
# 使用desc()进行辅助可以给最大值最小值rank。
y <- c(1,2,2,NA,3,4)
min_rank(y) # 给出从小到大排序的各个值的索引
min_rank(desc(y)) # 给出从小到大排序的各个值的索引
# 如果min_rank()解决不了你的需求，看看变种
# row_number()、dense_rank()、percent_rank()、cume_dist()和ntile()，
# 查看他们的帮助页面获取使用方法
row_number(y)
dense_rank(y)
percent_rank(y)
cume_dist(y)

# 使用summarize()计算汇总值
# 最后一个关键的动词是summarize()，它将一个数据框坍缩为单个行：
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
# 除非我们将summarize()与group_by()配对使用，不然summarize()显得没啥用。
# 这个操作会将分析单元从整个数据集转到单个的组别。
# 然后，当你使用dplyr动词对分组的数据框进行操作时，它会自动进行分组计算。
# 比如，我们想要按日期分组，得到每个日期的平均延期：
(by_day <- group_by(flights, year, month, day))
# by_day$dep_delay
summarize(by_day, delay = mean(dep_delay, na.rm = TRUE))
# group_by()与summarize()的联合使用是我们最常用的dplyr工具：进行分组汇总。
# 在我们进一步学习之前，我们需要了解一个非常强大的思想：管道。

# 使用管道整合多个操作
# 想象你要探索每个位置距离和平均航班延迟的关系。
# 使用你已经知道的dplyr知识，你可能会写出下面的代码：
by_dest <- group_by(flights, dest)
by_dest
# ?n() # 观测数
delay <- summarize(by_dest,
                   count = n(),
                   dist = mean(distance, na.rm = TRUE),
                   delay = mean(arr_delay, na.rm = TRUE) )
# delay
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
  geom_point(aes(size=count), alpha = 1/3) + 
  geom_smooth(se = FALSE)
# 看起来在大概750英里之前，距离增大，延误时间也增加；随后减少。
# 可能是航班长了之后，飞机更有能力在空中进行调整？
# 上述代码分三步进行了数据准备：
# 按目的地将航班分组
# 汇总计算距离、平均延时和航班数目
# 移除噪声点和Honolulu航班，它太远了。
# 这个代码写的有点令人沮丧，
# 尽管我们不关心中间变量（临时变量），
# 但我们却不得不创造这些中间变量存储结果数据框。
# 命名是一件非常困难的事情，它会降低我们分析的速度。

# 另一种方式可以解决同样的问题，这就是管道pipe，%>%：
delays <- flights %>%
  group_by(dest) %>%
  summarize(
    count = n(),
    dist = mean(distance, na.rm = TRUE),
    delay = mean(arr_delay, na.rm = TRUE)
  ) %>%
  filter(count > 20, dest != "HNL")
# 这代码聚焦于转换，而不是什么被转换，这让代码更容易阅读。
# 你可以将这段代码当作命令式的语句：分组、然后汇总，然后过滤。
# 对%>%理解的一种好的方式就是将它发音为"然后"。
# 在后台，x %>% f(y)会变成f(x, y)，
# x %>% f(y) %>% g(z)会变成g(f(x, y), z)等等如此。
# 你可以使用管道——用一种从上到下，从左到右的的方式重写多个操作。
# 从现在开始我们将会频繁地用到管道，因为它会提升代码的可读性。
# 使用管道进行工作是属于tidyverse的一个重要标准。
# 唯一的例外是ggplot2，它在管道开发之前就已经写好了。
# 不幸的是，ggplot2的下一个版本ggvis会使用管道，但还没有发布。

# 缺失值
# 你可能会好奇我们先前使用的na.rm参数。如果我们不设置它会发生什么呢？
flights %>%
  group_by(dest) %>%
  summarize(
    count = n(),
    dist = mean(distance),
    delay = mean(arr_delay)
  ) %>%
  filter(count > 20, dest != "HNL")
# 我们得到了一堆缺失值！如果输入不去除缺失值，结果必然是缺失值。
# 幸运的是，所有的聚集函数都有na.rm参数，它可以在计算之前移除缺失值。
flights %>%
  group_by(year, month, day) %>%
  summarize(mean = mean(dep_delay, na.rm = TRUE))
# 这个例子中，缺失值代表了取消的航班，
# 所以我们解决这样问题的办法就是首先移除取消的航班。
not_cancelled <- flights %>%
  filter(!is.na(dep_delay), !is.na(arr_delay))
# (cancelled <- flights %>% 
#   filter(is.na(dep_delay), is.na(arr_delay)))
not_cancelled %>%
  group_by(year, month, day) %>%
  summarize(mean = mean(dep_delay))

# 计数
# 无论什么时候你进行汇总，
# 包含计数n()或者非缺失值计数sum(!is.na(x))总是一个好想法。
# 这样你可以检查你下结论来源的数据数目。
# 例如，让我们看下有最高平均延时的飞机（根据尾号识别）：
delays <- not_cancelled %>%
  group_by(tailnum) %>%
  summarize(
    delay = mean(arr_delay)
  )
ggplot(data = delays, mapping = aes(x = delay)) + 
  geom_freqpoly(binwidth = 10)
# 哇！居然有些飞机平均延时5个小时（300分钟）。
# 绘制平均延时下航班数目的散点图可以呈现更多的信息：
delays <- not_cancelled %>%
  group_by(tailnum) %>%
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )
ggplot(data = delays, mapping = aes(x = n, y = delay)) + 
  geom_point(alpha = 1/10)
# 当航班数少时平均延时存在很大的变异，这并不奇怪。
# 这个图的形状很有特征性：
# 无论什么时候你按照组别绘制均值（或其他汇总量），
# 你会看到变异会随着样本量的增加而减少。
# 当你看到这种类型图时，过滤掉有很少数目的组别是很有用的，
# 可以看到数据更多的模式和更少的极端值。
# 这正是下面代码做的事情，它同时展示了整合dplyr与ggplot2的一种手动方式。
# 突然从%>%转换到+可能会感觉有点伤，但习惯了就会感觉很便利啦：
delays %>%
  filter(n > 25) %>%
  ggplot(mapping = aes(x = n, y = delay)) + 
  geom_point(alpha = 1/10)

# 让我们看另一个例子：棒球运动中击球手的平均表现与上场击球次数的关系。
# 这里我们使用来自Lahman包的数据
pacman::p_load(Lahman)
# 计算每个选手平均成功率（击球平均得分数，击球数/尝试数）。
# 当我画出击球手技能（用成功率衡量）与击球的机会数关系时，你会看到两种模式：
# 数据点越多，变异越少
# 选手技能和击球机会成正相关关系。
# 这是因为队伍可以控制谁可以上场，很显然他们都会选自己最棒的选手：
# 转换为tibble，看起来更舒服
batting <- as.tibble(Lahman::Batting)
batters <- batting %>%
  group_by(playerID) %>%
  summarize(
    ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
    ab = sum(AB, na.rm = TRUE)
  )
batters %>% 
  filter(ab > 100) %>%
  ggplot(mapping = aes(x = ab, y = ba)) + 
  geom_point() +
  geom_smooth(se = FALSE)

# 有用的汇总函数
# 仅仅使用均值、计数和求和这些函数就可以帮我做很多事情，
# 但R提供了许多其他有用的汇总函数：
# 位置度量
# 我们已经使用过mean()函数求取平均值（总和除以长度），
# median()函数也非常有用，它会找到中位数。
# 有时候整合聚集函数和逻辑操作符是非常有用的：
not_cancelled %>%
  group_by(year, month, day) %>% 
  summarize(
    # 平均延时
    avg_delay1 = mean(arr_delay),
    # 平均正延时
    avg_delay2 = mean(arr_delay[arr_delay > 0])
  )
# 分布度量sd(x),IQR(x),mad(x)
# sd()计算均方差（也称为标准差或简写为sd），是分布的标准度量；
# IQR()计算四分位数极差；
# mad()计算中位绝对离差（存在离群点时，是更稳定的IQR值等价物）。
# 为何到某些目的地航班的距离比其他存在更多变异
not_cancelled %>% 
  group_by(dest) %>% 
  summarize(distance_sd = sd(distance)) %>% 
  arrange(desc(distance_sd))
# 等级度量 min(x),quantile(x, 0.25),max(x)
# 分位数是中位数更通用化的一种形式。
# 每天第一班飞机和最后一般飞机是什么时候？
not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarize(
    first = min(dep_time),
    last = max(dep_time)
  )
# 位置度量 first(x), nth(x, 2), last(x)
# 这些函数跟x[1],x[2],x[length(x)]工作相似，
# 但是如果该位置不存在会返回一个默认值。
# 例如，我们想找到每天起飞的第一班和最后一班飞机：
not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarize(
    first_dep = first(dep_time),
    last_dep = last(dep_time)
  )
# 这些函数可以与基于rank的函数互补：
not_cancelled %>% 
  group_by(year, month, day) %>% 
  mutate(r = min_rank(desc(dep_time))) %>% 
  filter(r %in% range(r)) # 找出最小一位和最大一位
# ?range
# x <- c(NA, 1:3, -1:1/0); x
# range(x)
# range(x, na.rm = TRUE)
# range(x, finite = TRUE) # 给出最大值和最小值
# 计数
# 你已经见过了n()函数，它没有任何参数并返回当前组别的大小。
# 为了对非缺失值计数，使用sum(!is.na(x))。
# 要对唯一值进行计数，使用n_distinct()：
# 哪个目的地有最多的carrier
not_cancelled %>% 
  group_by(dest) %>% 
  summarize(carriers = n_distinct(carrier)) %>% 
  arrange(desc(carriers))
# 计数十分有用，如果你仅仅想要计数，dplyr提供了一个帮助函数：
not_cancelled %>% 
  count(dest)
# 你可以选择性提供一个权重变量。比如，你想用它计数（求和）一个飞机飞行的总里程：
not_cancelled %>% 
  count(tailnum, wt = distance)
# 计数与逻辑值比例 sum(x > 10), mean(y == 0)
# 当与数值函数使用时，TRUE被转换为1，FALSE被转换为0。
# 这让sum()与mean()变得非常有用，sum(x)可以计算x中TRUE的数目，mean()可以计算比例：
# 多少航班在5点前离开
not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarize(n_early = sum(dep_time < 500))
# 延时超过1小时的航班比例是多少
not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarize(hour_perc = mean(arr_delay > 60))
# 按多个变量分组
# 当你按多个变量分组时，可以非常容易地对数据框汇总：
flights %>%
  group_by(year, month, day) %>%
  summarise(flights = n()) -> per_day
(per_month <- summarize(per_day, flights = sum(flights)))
(per_year  <- summarize(per_month, flights = sum(flights)))
# 解开分组
# 当你想要移除分组时，使用ungroup()函数：
flights %>%
  group_by(year, month, day) %>%
  ungroup() %>%  # 不再按日期分组
  summarize(flights = n()) # 所有的航班

# 分组的Mutates
# 分组在与汇总衔接时非常有用，但你也可以与mutate()和filter()进行便利操作：
# 找到每组中最糟糕的成员：
# ?rank
# (r1 <- rank(x1 <- c(3, 1, 4, 15, 92))) # 给出从小到大排序索引
flights_sml %>% 
  group_by(year, month, day) %>% 
  filter(rank(desc(arr_delay)) < 10 )
# 找到大于某个阈值的所有组
(popular_dests <- flights %>% 
   group_by(dest) %>% 
   filter(n() > 365))
# 标准化来计算每组的指标
popular_dests %>% 
  filter(arr_delay > 0) %>% 
  mutate(prop_delay = arr_delay / sum(arr_delay)) %>% 
  select(year:day, dest, arr_delay, prop_delay)


本文主要介绍如何根据条件对表格进行过滤，主要使用filter函数进行实现
这里用到R自带的mtcars数据集

library(tidyverse)
# 首先，我们把行的名称转化为一列数据，名为rownames
# 然后，把数据库转化为tibble格式，存在mtcars1变量中
head(mtcars)
# 增加一列 rowname
(mtcars %>%
  rownames_to_column() %>%
  as_tibble() -> mtcars1)

实际工作中，经常会需要用到把一定条件的记录调出来的情况
比如我们需要提取cyl为4的记录（cyl代表汽车汽缸的数量），就需要用到条件过滤：
mtcars1 %>%
filter(cyl == 4)

如何定义条件？很简单，是或不是
比如上面的例子，如果cyl等于4，就符合条件，否则不符合条件
基本的条件操作符如下所示：
== 等于
!= 不等于
> 大于
>= 大于等于
< 小于
<= 小于等于
is.na() 是否为缺失值
下面再举一个例子，比如我们需要除了4个汽缸以外的数据：
mtcars1 %>%
filter(cyl != 4)

过滤缺失值：
比如计算均值的时候，不容许数据中包含缺失值
如何去掉缺失值呢？可以使用drop_na函数
下面先构造一个3*2的数据框，并在里面设置缺失值
(tibble(x = c(1, 2, NA),y = c('a', NA, 'b')) -> df)
df %>% drop_na()  # 去掉含有缺失值的行，也可以使用函数na.omit移除所有含有缺失值的观测
df %>% drop_na(x)  # 去掉x列含有缺失值的行（会连带去掉相应的该行y值）
df %>% drop_na(y)
可以看到，使用drop_na函数，可以轻松去掉包含缺失值的行，而且还可以指定去除某列中含有缺失值的行
那么，如何找到这些具有缺失值的行呢？可以利用is.na函数
df %>%
filter(is.na(x))

组合过滤：
当条件很多时，我们可以使用逻辑操作符把条件组合起来，一起进行过滤
经典的逻辑操作符包括 &（与）、|（或）、!（非），有的编程语言会用英语AND/OR/NOT来表示这些逻辑关系，但是在逻辑层面上表达是一致的
下面通过一个例子来说明这些逻辑关系：
&：如果顾客最近一周买了东西且（&）买的东西超过100元，那么我们把这些顾客的交易记录调出来；
|：如果顾客最近一周买了东西或者（|）购买东西的频率维持在一周一次，那么我们把这些顾客的交易记录调出来；
!：我们只考虑女性客户，因此男性客户都剔除（!）掉。

& 操作符
我们想要筛选气缸（cyl）为4，而且马力（hp）大于100的汽车
mtcars1 %>%
filter(cyl == 4 & hp > 100)
# 等价于
mtcars1 %>%
filter(cyl == 4, hp > 100)

| 操作符
我们想要筛选气缸（cyl）为4，或者马力（hp）大于100的汽车。
mtcars1 %>%
filter(cyl == 4 | hp > 100)

! 操作符
我们想要筛选除了4个气缸以外的汽车记录。
mtcars1 %>%
filter(!cyl == 4)
# 等价于
mtcars1 %>%
filter(cyl != 4)

文本过滤:
数据表中的数据不都是数值型的，有的是字符串格式存在的文本
在我们的例子中，比如我们想了解 Merc 这个型号的车，那么我们就要从rowname列中个提取包含“Merc”的行
tidyverse包中，包含了stringr包，可以对字符串进行识别、替换、提取等高级操作
如果我们要根据字符串进行过滤，就需要用到str_detect函数，例子如下：
# 提取rowname中包含“Merc”的记录
mtcars1 %>%
filter(str_detect(rowname, pattern = "Merc"))
我们看到pattern参数中，我们赋予了“Merc”模式
事实上，pattern可以接受正则表达式的内容，比如我们要搜索以M开头的车型，那么就可以把pattern改为“^M”：
mtcars1 %>%
filter(str_detect(rowname, pattern = "^M"))
正则表达式是一个很有用的工具，如果能够写出高效的正则表达式，就能够对字符串进行更加高级的筛选

# 例子
read.xlsx('kou.xlsx', sheetName = '585019681', encoding = 'UTF-8') -> data
data %>%
  rownames_to_column() %>%
  as_tibble() -> data.1
data.1 %>%
  filter(data.1$课程名称 == '语言学导论') -> yuyan
write.xlsx(yuyan, 'yuyan.xlsx')
