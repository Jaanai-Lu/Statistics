R是一种广泛用于数据分析和统计计算的强大语言，于上世纪90年代开始发展起来。
得益于全世界众多爱好者的无尽努力，继而开发出了一种基于R但优于R的基本文本编辑器 RStudio（用户的界面体验更好）。
也正是由于全世界越来越多的数据科学社区和用户对R包的贡献，让R语言在全球范围内越来越流行。
其中一些R包，例如MASS，SparkR，ggplot2，使数据操作,可视化和计算功能越来越强大。
一、初识R语言　　
1、为什么学R? 　
　事实上，我没有编程经验，也没有学过计算机。
  但是如果要学习数据科学,一个人必须学习R或Python作为开始学习的工具。
2、如何安装R / Rstudio?
  你可以https://www.r-project.org/官网下载并安装R，需要注意的是R的更新速度很快，下载新版本的体验会更好一些。
  另外,建议从RStudio开始学，因为RStudio的界面编程体验更好一些。
  你可以通过https://www.rstudio.com/products/rstudio/download/ 在“支持的平台上安装”部分中, 根据您的操作系统选择您需要的安装程序。
  点击桌面图标RStudio,就开始你的编程体验。
  让我们快速地了解一下RStudio界面：
  R script：在这个空间里可以写代码，要运行这些代码,只需选择代码行和按下Ctrl + R即可，或者,你可以点击“运行”按钮位置在右上角R的脚本。
  R console：这个区域显示的输出代码运行，同时你可以在控制台直接写代码。但是代码直接进入R控制台无法追踪。
  R环境：这个空间是显示设置的外部元素补充道。这里面包括数据集、变量向量,还可以检查R数据是否被正确加载。
  图形输出窗口：这个空间显示图表中创建的探索性数据分析。不仅仅输出图形,您可以选择包,寻求帮助和嵌入式R的官方文档。
3、如何安装包？
  R的计算能力在于它拥有强大的R包。
  在R中,大多数数据处理任务可以从两方面进行，使用R包和基本功能。
  在本教程中,我们将介绍最方便的和强大的R包。特别的，一般不太建议直接在R软件的中直接安装加载包，因为这样可能会影响你的计算速度。
  建议直接在R的官网上下载好您所需要的R包，通过本地安装的形式进行安装，如：
  在软件中安装：install.packages(“package name”)
  本地安装： install.packages(“E:/r/ggplot2_2.1.0.zip”)
4、用R进行基本的统计计算
  让我们开始熟悉R的编程环境及一些基本的计算，在R编程脚本窗口中输入程序，如下：
> 2 + 3
> 5 
> 6 / 3
> 2
> (3*8)/(2*3)
> 4 
> log(12)
> 1.07
> sqrt(121)
> 11
  类似地,可以尝试各种组合的计算形式。但是,如果你做了太多的计算，这样的编程未免过于麻烦，在这种情况下,创建变量是一个有用的方法。
  在R中,可以创建变量来简化。创建变量时使用 <- 或 = 符号，例如我想创建一个变量x计算7和8的总和,如下：
> 8 + 7 -> x
> x
> 15
  特别的，一旦我们创建一个变量,你不再直接得到输出，此时我们需要输入对应的变量然后再运行结果。
  注意，变量可以是字母,字母和数字，而不能是数字，数字是不能创建数值变量的。
二、编程基础慨念及R包
1、R中的数据类型和对象
  数据类型
  R中数据类型包括数值型，字符型，逻辑型，日期型及缺失值。数据类型在运用数据的过程中，很容易理解，在此不做详细解释。
> a <- c(1.8, 4.5)             #数值型
> b <- c(1 + 2i, 3 - 6i)       #混合型 
> c <- c("zhangsan", "lisi" )  #字符型
  数据对象
  R中的数据对象主要包括向量(数字、整数等)、列表、数据框和矩阵。下面具体进行了解：
○1向量
  正如上面提到的,一个向量包含同一个类的对象。但是,你也可以混合不同的类的对象。
  当不同的类的对象混合在一个列表中，这种效应会导致不同类型的对象转换成一个类。例如：
> qt <- c("Time", 24, "October", TRUE, 3.33)          #字符型
> ab <- c(TRUE, 24)                                   #数值型
> cd <- c(2.5, "May")                                 #字符型
> qt
[1] "Time"    "24"      "October" "TRUE"    "3.33"   
> ab
[1]  1 24
> cd
[1] "2.5" "May
  注：1、检查任何对象的类,使用class（）函数。 2、转换一个数据的类，使用as.（）函数。
> class(qt)
>"character"
> bar <- 0:5
> class(bar)
> "integer"
> as.numeric(bar)
> class(bar)
> "numeric"
> as.character(bar)
> class(bar)
> "character"
  类似地,可以自己尝试改变其他任何的类向量。
○2列表
  一个列表是一种包含不同的数据类型的元素特殊类型的向量。例如
> my_list <- list(22, "ab", TRUE, 1 + 2i)
> my_list
[[1]]
[1] 22
[[2]]
[1] "ab"
[[3]]
[1] TRUE
[[4]]
[1] 1+2i
  可以看出，,列表的输出不同于一个向量。
  这是因为所有对象类型不同。第一个双括号[1]显示了第一个元素包括的索引内容，依次类推。
  另外地，还可以尝试：
> my_list[[3]]
> [1] TRUE
> my_list[3]
> [[1]]
  [1] TRUE
○3矩阵
  当一个向量与行和列即维度属性,它变成了一个矩阵。一个矩阵是由行和列组成的，试着创建一个3行2列的矩阵:
> my_matrix <- matrix(1:6, nrow=3, ncol=2)
> my_matrix
[,1] [,2]
[1,] 1 4
[2,] 2 5
[3,] 3 6
> dim(my_matrix)
[1] 3 2
> attributes(my_matrix)
$dim
[1] 3 2
  正如你所看到的,一个矩阵的维度你可以通过dim()或attributes()命令获得，从一个矩阵中提取一个特定元素,只需使用上面矩阵的形式。例如
> my_matrix[,2]   #提取出第二列
> my_matrix[,1]   #提取出第二列
> my_matrix[2,]   #提取出第二行
> my_matrix[1,]   #提取出第二行
  同样的,你还可以从一个向量开始创建所需要的矩阵，需要做的是利用dim()分配好维度。如下所示：
> age <- c(23, 44, 15, 12, 31, 16)
> age
[1] 23 44 15 12 31 16
> dim(age) <- c(2,3)
> age
[,1] [,2] [,3]
[1,] 23 15 31
[2,] 44 12 16
> class(age)
[1] "matrix"
  另外，你也可以加入两个向量使用cbind()和rbind()函数。但是,需要确保两向量相同数量的元素。如果没有的话,它将返回NA值。
> x <- c(1, 2, 3, 4, 5, 6)
> y <- c(20, 30, 40, 50, 60)
> cbind(x, y)
> cbind(x, y)
x    y
[1,] 1 20
[2,] 2 30
[3,] 3 40
[4,] 4 50
[5,] 5 60
[6,] 6 70
> class(cbind(x, y))
[1] “matrix
○4数据框
  这是最常用的一种数据类型，它是用来存储列表数据的。
  它不同于矩阵，在一个矩阵中,每一个元素必须有相同的类。
  但是,在一个数据框里可以包含不同类别的列表。
  这意味着,每一列的数据就像一个列表,每次你在R中读取数据将被存储在一个数据框中。例如：
> df <- data.frame(name = c("ash","jane","paul","mark"), score = c(67,56,87,91))
> df
  name score
1 ash 67
2 jane 56
3 paul 87
4 mark 91
> dim(df)
[1] 4 2
> str(df)
'data.frame': 4 obs. of 2 variables:
$ name : Factor w/ 4 levels "ash","jane","mark",..: 1 2 4 3
$ score: num 67 56 87 91
> nrow(df)
[1] 4
> ncol(df)
[1] 2
  解释一下上面的代码。
  df是数据框的名字。dim()返回数据框的规格是4行2列，str()返回的是一个数据框的结构，nrow()和ncol()返回是数据框的行数和列数。
  特别地，我们需要理解一下R中缺失值的概念，NA代表缺失值，这也是预测建模的关键部分。现在,我们示例检查是否一个数据集有缺失值。
> df[1:2,2] <- NA        #令前两行第二列的数值为NA 
> df
  name score
1 ash NA
2 jane NA
3 paul 87
4 mark 91
> is.na(df)             #检查整个数据集缺失值，返回逻辑输出值
name score
[1,] FALSE TRUE
[2,] FALSE TRUE
[3,] FALSE FALSE
[4,] FALSE FALSE
> table(is.na(df))        #返回逻辑值各类的数量
FALSE TRUE 
6      2
> df[!complete.cases(df),]  #返回缺失值所在的行值
name  score
1 ash  NA
2 jane NA
  缺失值的存在严重阻碍了我们正常计算数据集。例如,因为有两个缺失值,它不能直接做均值得分。例如：
> mean(df$score)
[1] NA
> mean(df$score, na.rm = TRUE)
[1] 89
  na.rm = TRUE告诉R计算时忽略缺失值，只是计算选定的列中剩余值的均值(得分)。
  删除NA在数据中的行，可以使用na.omit
> new_df <- na.omit(df)
> new_df
name score
3 paul 87
4 mark 91
2、R中的控制语句
  正如它的名字一样,这样的语句在编码中起控制函数的作用，写一个函数也是一组多个命令自动重复编码的过程。
  例如:你有10个数据集，你想找到存在于每一个数据集中的“年龄”列。
  这可以通过两种方法，一种需要我们运行一个特定的程序运行10次，另外一种就需要通过编写一个控制语句来完成。
  我们先了解下R中的控制结构简单的例子：
  if.else这个结构是用来测试一个条件的，下面是语法：
if (<condition>){
         ##do something
} else {
         ##do something
}
  例子：
#initialize a variable
N <- 10
#check if this variable * 5 is > 40
if (N * 5 > 40){
       print("This is easy!")
} else {
       print ("It's not easy!")
}
[1] "This is easy!"
  for语句这个结构是当一个循环执行固定的语句时使用。下面是语法:
for(<search condition>){
          #do something
}
  Example
#initialize a vector
y <- c(99,45,34,65,76,23)
#print the first 4 numbers of this vector
for(i in 1:4){
     print (y[i])
}
[1] 99
[1] 45
[1] 34
[1] 65
  while语句首先测试条件,并只有在条件是正确时才执行，一旦执行循环,条件是再次测试，直到满足指定的条件然后输出。下面是语法：
#初始化条件
Age <- 12
#检验年龄是否小于17
while(Age < 17){
         print(Age)
         Age <- Age + 1 }
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
  当然，还有其他的控制结构,但比上面的不太常用。例如：
  repeat 它执行一个无限循环　　
  break 它打破循环的执行　　
  next 它允许跳过一个迭代循环　
  return 它帮助退出函数
3、常用的R包
  在R的镜像（CRAN）中，有超过7800个包可供调用，其中很多包可以用来预测建模.
  下面会简单的介绍其中几个。
  导入数据
  R为数据的导入提供了广泛的包，并且可以接入任何格式的数据。
  如txt,csv,sql等均可快速导入大文件的数据,。
  数据可视化
  R同样可以用来构建绘图命令，并且创建简单的图表非常好用。但是,当创建的图形变得较为复杂时，你应该安装ggplot2。
  数据操作
  R中有很多关于数据操作集合的包，可以做基本的和先进的快速计算，例如dplyr，plyr ，tidyr，lubricate，stringr等。
  建模学习/机器学习
  对于模型学习，caret包强大到足以满足大多创建机器学习模型的需要。当然,你也可以安装算法包，例如随机森林，决策树等。
到这里为止，你会觉得对于R的相关组件都相对熟悉了，从现在开始我们开始介绍一些关于模型预测的知识。
